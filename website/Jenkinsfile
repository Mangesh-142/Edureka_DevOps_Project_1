pipeline {
    agent {
        label 'jenkins_slave1'
    }

     stages {
        stage('Push Ansible configuration for Docker installation on test server') {
            steps {
                script {
                    // Replace 'root@172.31.8.138' with the actual name or IP address of your test server
                    def testServer = 'root@172.31.8.138'

                    // Replace 'https://github.com/Mangesh-142/Edureka_DevOps_Project_1.git' with your Ansible playbook Git repository URL
                    def ansibleRepo = 'https://github.com/Mangesh-142/Edureka_DevOps_Project_1.git'

                    // Clone the Ansible playbook repository
                    sh "git clone ${ansibleRepo} /tmp/ansible-repo"

                    // Copy Ansible playbook to the test server
                    //sh "scp -r /tmp/ansible-repo/* ${testServer}:/home/ubuntu/"

                     // Run Ansible playbook on the test server
                    sh "ssh ${testServer} 'ansible-playbook /tmp/ansible-repo/website/docker-installation.yml'"

                    // Clean up cloned repository on the Jenkins node
                    sh "rm -rf /tmp/ansible-repo"
                }
            }
        }

        stage('Build and deploy PHP Docker container') {
            steps {
                script {
                    // Replace 'https://github.com/Mangesh-142/Edureka_DevOps_Project_1.git' with your Git repository URL
                    def gitRepo = 'https://github.com/Mangesh-142/Edureka_DevOps_Project_1.git'

                    // Clone the Git repository
                    sh "git clone ${gitRepo} /tmp/php-web-app"

                    // Move to the directory with PHP website source code and Dockerfile
                    sh "cd /tmp/php-web-app"

                    // Add the command to set permissions
                    //sh "chmod -R 755 /tmp/php-web-app"

                    // Move to the directory with PHP website source code and Dockerfile
                    //sh "cd /tmp/php-web-app"  // Adjust this line based on your directory structure

                    // Build the Docker image
                    sh "docker build -t php-web-app ."

                    // Run the Docker container on port 8000
                    sh "docker run -d --name php-container -p 8000:80 php-web-app"
                }
            }
        }
    }

    post {
        success {
            // Send email on success
            emailext subject: "Job Succeeded: ${currentBuild.fullDisplayName}",
                      body: "The build of ${currentBuild.fullDisplayName} succeeded.",
                      to: "mangeshinde1612@gmail.com",
                      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        }

        failure {
            // Send email on failure
            emailext subject: "Job Failed: ${currentBuild.fullDisplayName}",
                      body: "The build of ${currentBuild.fullDisplayName} failed.",
                      to: "mangeshinde1612@gmail.com",
                      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        }
    }
}
